{"ast":null,"code":"var _jsxFileName = \"D:\\\\hackOMR\\\\project\\\\react-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Header from './components/Header';\nimport UploadArea from './components/UploadArea';\nimport Results from './components/Results';\nimport Loading from './components/Loading';\nimport ErrorMessage from './components/ErrorMessage';\nimport { processOMRImage } from './services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [results, setResults] = useState(null);\n  const [error, setError] = useState(null);\n  const handleFileSelect = file => {\n    setSelectedFile(file);\n    setError(null);\n    setResults(null);\n  };\n  const handleRemoveFile = () => {\n    setSelectedFile(null);\n    setError(null);\n    setResults(null);\n  };\n  const handleProcessImage = async () => {\n    if (!selectedFile) {\n      setError('Please select a file first.');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    setResults(null);\n    try {\n      const result = await processOMRImage(selectedFile);\n      setResults(result);\n    } catch (err) {\n      console.error('Error processing image:', err);\n      setError(err.message || 'Failed to process image. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(UploadArea, {\n        selectedFile: selectedFile,\n        onFileSelect: handleFileSelect,\n        onRemoveFile: handleRemoveFile,\n        onProcessImage: handleProcessImage,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 23\n      }, this), error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        message: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }, this), results && /*#__PURE__*/_jsxDEV(Results, {\n        data: results\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dcfhTxdAY287Yzo+OOoWFRBsvXo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","UploadArea","Results","Loading","ErrorMessage","processOMRImage","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","isLoading","setIsLoading","results","setResults","error","setError","handleFileSelect","file","handleRemoveFile","handleProcessImage","result","err","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onFileSelect","onRemoveFile","onProcessImage","data","_c","$RefreshReg$"],"sources":["D:/hackOMR/project/react-frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Header from './components/Header';\r\nimport UploadArea from './components/UploadArea';\r\nimport Results from './components/Results';\r\nimport Loading from './components/Loading';\r\nimport ErrorMessage from './components/ErrorMessage';\r\nimport { processOMRImage } from './services/api';\r\n\r\nfunction App() {\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [results, setResults] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleFileSelect = (file) => {\r\n    setSelectedFile(file);\r\n    setError(null);\r\n    setResults(null);\r\n  };\r\n\r\n  const handleRemoveFile = () => {\r\n    setSelectedFile(null);\r\n    setError(null);\r\n    setResults(null);\r\n  };\r\n\r\n  const handleProcessImage = async () => {\r\n    if (!selectedFile) {\r\n      setError('Please select a file first.');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setResults(null);\r\n\r\n    try {\r\n      const result = await processOMRImage(selectedFile);\r\n      setResults(result);\r\n    } catch (err) {\r\n      console.error('Error processing image:', err);\r\n      setError(err.message || 'Failed to process image. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Header />\r\n      \r\n      <main className=\"main-content\">\r\n        <UploadArea\r\n          selectedFile={selectedFile}\r\n          onFileSelect={handleFileSelect}\r\n          onRemoveFile={handleRemoveFile}\r\n          onProcessImage={handleProcessImage}\r\n          isLoading={isLoading}\r\n        />\r\n\r\n        {isLoading && <Loading />}\r\n\r\n        {error && <ErrorMessage message={error} />}\r\n\r\n        {results && <Results data={results} />}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}